[gd_resource type="VisualShader" load_steps=5 format=2]

[ext_resource path="res://models/mars texture.jpg" type="Texture" id=1]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=2]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=3]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 10, 10, 10 ) ]
operator = 2

[resource]
code = "shader_type spatial;
uniform sampler2D tex_frg_3;


void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = vec3(UV,0.0);

// VectorOp:4
	vec3 n_in4p1 = vec3(10.00000,10.00000,10.00000);
	vec3 n_out4p0;
	n_out4p0 = n_out2p0 * n_in4p1;

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	vec4 tex_frg_3_read = texture( tex_frg_3 , n_out4p0.xy );
	n_out3p0 = tex_frg_3_read.rgb;
	n_out3p1 = tex_frg_3_read.a;

// Output:0
	ALBEDO = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -256, 127 )
nodes/fragment/0/position = Vector2( 720, 160 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -180, 260 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 400, 180 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 140, 220 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 0, 2, 0, 4, 0, 4, 0, 3, 0 )

